example:
    property: "I AM THE DEV JSON"
server:
    port: 8087
signing:
    key: "345345fsdfsf5345"
logstash:
    host: "logstash:5000"
    hostWithoutPort: "logstash"
    port: 5000
logging:
    config: "classpath:logback-delayed.xml"
security:
    oauth2:
        resource:
            userInfoUri: "http://authenticationservice:8082/user"
        client:
            grant-type: "client_credentials"
management:
    endpoints:
        web:
            exposure:
                include: "*"
    enabled-by-default: true
eureka:
    client:
        serviceUrl:
            defaultZone: "http://eurekaserver:8070/eureka/"
        healthcheck:
            enabled: true
        registerWithEureka: true
        fetchRegistry: true
    instance:
        api:
            port: 80
spring:
    jpa:
        hibernate:
            ddl-auto: "none"
        database: "POSTGRESQL"
        show-sql: true
        properties:
            hibernate:
                dialect: "org.hibernate.dialect.PostgreSQLDialect"
    datasource:
        platform: "postgres"
        testWhileIdle: true
        validationQuery: "SELECT 1"
    database:
        driverClassName: "org.postgresql.Driver"
    cloud:
        loadbalancer:
            ribbon:
                enabled: false
        stream:
            bindings:
                inboundOrgChanges:
                    destination: "orgChangeTopic"
                    content-type: "application/json"
                    group: "licensingGroup"
            kafka:
                binder:
                    zkNodes: "kafka"
                    brokers: "kafka"
zipkin:
    baseUrl: "http://zipkin:9411"
sleuth:
    sampler:
        percentage: 1
redis:
    host: "redis"
    port: 6379
keycloak:
    realm: "spmia-realm"
    auth-server-url: "http://keycloak:8080/auth"
    ssl-required: "external"
    resource: "ostock"
    credentials:
        secret: "11764029-3707-4985-805d-df26d1d2bbeb"
    use-resource-role-mappings: true
    bearer-only: true
stream_server:
    api:
        host: "0.0.0.0"
        port: 80
        urlWithoutSchema: "0.0.0.0:80"
        httpReadTimeout: 10
        httpWriteTimeout: 10
        httpKeepalive: true
        cert: ""
        key: ""
    rtmp:
        host: "0.0.0.0"
        port: 1460
        urlWithoutSchema: "0.0.0.0:1460"
        muxerBufferSize: 300
    manager_client:
        urlWithoutSchema: "0.0.0.0:1460"
    stream_manager:
        node_info:
            region: "europe"
            type: "server"
            name: "europe"
            host: "europe"
        server:
            localDebugMode: true
            name: "stream-d"
            muxer:
                bufferSize: 300
                keyItWarn: 2
                maxFrames: 10
                buffer: 3000000
                audioSize: 4096
            reStream:
                request_duration: 30
        rating_server:
            url: "http://rating_server.hz"
        profiler:
            enable: false
            host: "0.0.0.0"
            port: 6060
            urlWithoutSchema: "0.0.0.0:6060"
        log:
            path: "/proc/self/fd/2"
            level: 4
            stdout: true
            tag: "stream-dreamcam"
        socket:
            host: "0.0.0.0"
            port: 1444
            writeDeadLine: 2
            keyframeStart: true
            pullTimeout: 2
            servers:
                - "ws://0.0.0.0:1444"
            pushDump:
                enable: false
                dir: "/dev/shm"
        bss:
            url: "http://127.0.0.1:8081"
    snap:
        interval: 5m30s
        allowedOnErrorRetries: 5
    streamDecoderAPI:
        host: http://stream_decoder:7171

stream_manager_client:
    api:
        host: "127.0.0.1"
        port: 85
        url: "http://0.0.0.0:85"
        urlWithoutSchema: "http://0.0.0.0:85"
        httpReadTimeout: 10
        httpWriteTimeout: 10
        httpKeepalive: true
        cert: ""
        key: ""
    manager:
        url: "http://gateway:8072/ds-stream-manager"
