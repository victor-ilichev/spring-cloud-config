example.property= I AM THE STANDALONE

logstash.host= 127.0.0.1:5000
logstash.hostWithoutPort=127.0.0.1
logstash.port=5000

logging.config=classpath:logback-delayed.xml

spring.jpa.hibernate.ddl-auto=none
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql = true
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName= org.postgresql.Driver
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

server.port= 8087

spring.cloud.loadbalancer.ribbon.enabled = false

management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

eureka.instance.preferIpAddress = true
eureka.client.registerWithEureka = true
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://127.0.0.1:8070/eureka/
eureka.instance.api.port = 1445

security.oauth2.resource.userInfoUri= http://authenticationservice:8082/user
security.oauth2.client.grant-type = client_credentials
signing.key: "345345fsdfsf5345"



spring.cloud.stream.bindings.inboundOrgChanges.destination= orgChangeTopic
spring.cloud.stream.bindings.inboundOrgChanges.content-type= application/json
spring.cloud.stream.bindings.inboundOrgChanges.group= licensingGroup
spring.cloud.stream.kafka.binder.zkNodes= kafka
spring.cloud.stream.kafka.binder.brokers=kafka


spring.zipkin.baseUrl:http://zipkin:9411
spring.sleuth.sampler.percentage: 1

redis.server = redis
redis.port = 6379


keycloak.realm = spmia-realm
keycloak.auth-server-url = http://keycloak:8080/auth
keycloak.ssl-required = external
keycloak.resource = ostock
keycloak.credentials.secret = 11764029-3707-4985-805d-df26d1d2bbeb
keycloak.use-resource-role-mappings = true
keycloak.bearer-only = true

stream_server.api.host = 0.0.0.0
stream_server.api.port = 1445
stream_server.api.urlWithoutSchema = 0.0.0.0:1445
stream_server.api.httpReadTimeout = 30
stream_server.api.httpWriteTimeout = 30
stream_server.api.httpKeepalive = true
stream_server.api.cert =
stream_server.api.key =
stream_server.api.schema = http
stream_server.api.servers = http://0.0.0.0:1445

stream_server.rtmp.host = 0.0.0.0
stream_server.rtmp.port = 1430
stream_server.rtmp.urlWithoutSchema = 0.0.0.0:1430
stream_server.rtmp.muxerBufferSize = 300
stream_server.rtmp.initPath = /tmp/dreamcam/

stream_server.stream_manager.api.urlWithoutSchema = 127.0.0.1:1471

stream_server.stream_manager.node_info.region = europe
stream_server.stream_manager.node_info.type = server
stream_server.stream_manager.node_info.name = europe
stream_server.stream_manager.node_info.host = europe

stream_server.server.localDebugMode = true
stream_server.server.name = stream-d

# Muxer buffer size (in packets). Every packet contains muxer_maxframes frames
stream_server.server.muxer.bufferSize = 300
# Write warning in log if rtmp stream key interval more than muxer_keyit_warn seconds
stream_server.server.muxer.keyItWarn = 2
# Muxer frames in packet
stream_server.server.muxer.maxFrames = 10
# Buffer (in bytes) for muxing every incoming stream from flv to fmp4
stream_server.server.muxer.buffer = 3000000
# Buffer (in bytes) for muxing audio (cannot be more than muxer_buffer variable)
stream_server.server.muxer.audioSize = 4096

# The length of time during which, after the end of the restream,
# the server will return: 429 Too Many Requests (in seconds)
stream_server.server.reStream.request_duration = 30

stream_server.rating_server.url = http://rating_server.hz

stream_server.profiler.enable = true
stream_server.profiler.host = 0.0.0.0
stream_server.profiler.port = 6060
stream_server.profiler.urlWithoutSchema = 0.0.0.0:6060

stream_server.log.path = /proc/self/fd/2
stream_server.log.level = 4
stream_server.log.stdout = true
stream_server.log.tag = stream-dreamcam

stream_server.socket.host = 0.0.0.0
stream_server.socket.port = 1444
# Wss send timeout (in seconds). Server will drop connection with wss client after timeout.
stream_server.socket.writeDeadLine = 2
# Start stream with keyframe (true/false)
stream_server.socket.keyframeStart = true
# Timeout (in seconds) for wss pull server.
# If no packets are received in the specified timeout, the connection will end.
stream_server.socket.pullTimeout = 2
stream_server.socket.servers = ws://0.0.0.0:1444
# Dump all wss pushed streams to files
stream_server.socket.pushDump.enable = false
# Directory for wss pushed streams dumps
stream_server.socket.pushDump.dir = /dev/shm

stream_server.bss.url = http://127.0.0.1:8081

stream_manager_client.api.host = 127.0.0.1
stream_manager_client.api.port = 1470
stream_manager_client.api.url = http://127.0.0.1:1470
stream_manager_client.api.urlWithoutSchema = 127.0.0.1:1470
stream_manager_client.api.httpReadTimeout = 10
stream_manager_client.api.httpWriteTimeout = 10
stream_manager_client.api.httpKeepalive = true
stream_manager_client.api.cert =
stream_manager_client.api.key =

stream_manager_client.manager.url = http://127.0.0.1:1471
